{"version":3,"sources":["../node_modules/discord.js/src/client/websocket/handlers sync /^/.*/.js$","master-detail.module.css","directory.js","bot-view.js","App.js","serviceWorker.js","index.js","app.module.css"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Directory","useRouteMatch","path","url","className","styles","container","to","activeClassName","activeLink","exact","Detail","useParams","name","client","require","Client","BotView","props","state","botToken","clientConnected","clientListening","currentMessage","guilds","channels","guildChannels","selectedGuild","selectedChannel","messageArray","messageInput","updateMessageInput","bind","sendMessage","startDiscordBot","updateBotToken","event","this","setState","target","value","on","user","tag","cache","forEach","guild","prevState","assign","console","log","channel","login","catch","preventDefault","receivedMessage","updateMessages","createChannelListForGuild","startListeningToMessages","messages","fetch","limit","then","Array","from","values","reverse","error","send","guildList","guildId","key","onClick","selectGuild","channelList","channelId","type","selectChannel","messageList","message","author","username","content","discordAppAside","discordApp","discordAppHeader","onSubmit","onChange","React","Component","App","homeLink","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7b1e2e2.chunk.js","sourcesContent":["var map = {\n\t\"./CHANNEL_CREATE.js\": 209,\n\t\"./CHANNEL_DELETE.js\": 210,\n\t\"./CHANNEL_PINS_UPDATE.js\": 211,\n\t\"./CHANNEL_UPDATE.js\": 212,\n\t\"./GUILD_BAN_ADD.js\": 213,\n\t\"./GUILD_BAN_REMOVE.js\": 214,\n\t\"./GUILD_CREATE.js\": 215,\n\t\"./GUILD_DELETE.js\": 216,\n\t\"./GUILD_EMOJIS_UPDATE.js\": 217,\n\t\"./GUILD_INTEGRATIONS_UPDATE.js\": 218,\n\t\"./GUILD_MEMBERS_CHUNK.js\": 219,\n\t\"./GUILD_MEMBER_ADD.js\": 220,\n\t\"./GUILD_MEMBER_REMOVE.js\": 221,\n\t\"./GUILD_MEMBER_UPDATE.js\": 222,\n\t\"./GUILD_ROLE_CREATE.js\": 223,\n\t\"./GUILD_ROLE_DELETE.js\": 224,\n\t\"./GUILD_ROLE_UPDATE.js\": 225,\n\t\"./GUILD_UPDATE.js\": 226,\n\t\"./INVITE_CREATE.js\": 227,\n\t\"./INVITE_DELETE.js\": 228,\n\t\"./MESSAGE_CREATE.js\": 229,\n\t\"./MESSAGE_DELETE.js\": 230,\n\t\"./MESSAGE_DELETE_BULK.js\": 231,\n\t\"./MESSAGE_REACTION_ADD.js\": 232,\n\t\"./MESSAGE_REACTION_REMOVE.js\": 233,\n\t\"./MESSAGE_REACTION_REMOVE_ALL.js\": 234,\n\t\"./MESSAGE_REACTION_REMOVE_EMOJI.js\": 235,\n\t\"./MESSAGE_UPDATE.js\": 236,\n\t\"./PRESENCE_UPDATE.js\": 237,\n\t\"./READY.js\": 238,\n\t\"./RESUMED.js\": 239,\n\t\"./TYPING_START.js\": 240,\n\t\"./USER_UPDATE.js\": 241,\n\t\"./VOICE_SERVER_UPDATE.js\": 242,\n\t\"./VOICE_STATE_UPDATE.js\": 243,\n\t\"./WEBHOOKS_UPDATE.js\": 244,\n\t\"./index.js\": 110\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 208;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"master-detail_container__1aaED\",\"activeLink\":\"master-detail_activeLink__1KB0Q\",\"discordApp\":\"master-detail_discordApp__1s1Va\",\"discordAppAside\":\"master-detail_discordAppAside__2jJQb\",\"discordAppHeader\":\"master-detail_discordAppHeader__2wPK6\"};","import React from 'react';\r\nimport styles from './master-detail.module.css';\r\nimport { NavLink, useParams, useRouteMatch, Switch, Route } from 'react-router-dom';\r\n\r\n\r\n\r\nexport default function Directory() {\r\n    const { path, url } = useRouteMatch();\r\n    return (\r\n        <div className={styles.container}>\r\n            <aside>\r\n                <NavLink to={`${url}/about-me`} activeClassName={styles.activeLink}>About Me</NavLink>\r\n                <NavLink to={`${url}/description`} activeClassName={styles.activeLink}>Description</NavLink>\r\n                <NavLink to={`${url}/faq`} activeClassName={styles.activeLink}>FAQ</NavLink>\r\n            </aside>\r\n            <main>\r\n                <Switch>\r\n                    <Route exact path={path}>\r\n                        <h3>Select a section on the left to view information about my app!</h3>\r\n                    </Route>\r\n                    <Route path={`${path}/:name`}>\r\n                        <Detail></Detail>\r\n                    </Route>\r\n                </Switch>\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Detail() {\r\n    const { name } = useParams();\r\n    switch (name) {\r\n        case \"about-me\":\r\n            return (\r\n                <div>\r\n                    <h2>About me</h2>\r\n                    <p>This is my webapp for my discord bot.</p>\r\n                </div>\r\n            );\r\n        case \"description\":\r\n            return (\r\n                <div>\r\n                    <h2>Description</h2>\r\n                    <p>This is my webapp for my discord bot.</p>\r\n                    <p>Currently the only features available are reading and sending messages.</p>\r\n                </div>\r\n            );\r\n        case \"faq\":\r\n            return (\r\n                <div>\r\n                    <h2>FAQ</h2>\r\n                    <div>\r\n                        <h3>How do I use this thing?</h3>\r\n                        <p>Click the Main App button at the top!</p>\r\n                    </div>\r\n                </div>\r\n            );\r\n        default:\r\n            return (\r\n                <div>\r\n                    <h2>ERROR 404</h2>\r\n                    <p>Page not found</p>\r\n                </div>\r\n            );\r\n    }\r\n\r\n}","import React from 'react';\r\nimport styles from './master-detail.module.css';\r\nconst Discord = require('discord.js')\r\nconst client = new Discord.Client();\r\n\r\nexport default class BotView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            botToken: \"\",\r\n            clientConnected: false,\r\n            clientListening: false,\r\n            currentMessage: \"Idle.\",\r\n            guilds: {},\r\n            channels: {},\r\n            guildChannels: {},\r\n            selectedGuild: null,\r\n            selectedChannel: null,\r\n            messageArray: null,\r\n            messageInput: \"\"\r\n        };\r\n\r\n        this.updateMessageInput = this.updateMessageInput.bind(this);\r\n        this.sendMessage = this.sendMessage.bind(this);\r\n        this.startDiscordBot = this.startDiscordBot.bind(this);\r\n        this.updateBotToken = this.updateBotToken.bind(this);\r\n    }\r\n\r\n    tick() {\r\n\r\n    }\r\n\r\n    updateBotToken(event){\r\n        this.setState({\r\n            botToken : event.target.value\r\n        });\r\n    }\r\n\r\n    startDiscordBot(event) {\r\n        this.setState((state, props) => ({\r\n            currentMessage: \"Connecting with token \"+this.state.botToken\r\n        }));\r\n        \r\n        // Client logon code (update guilds and channels in state)\r\n        client.on('ready', () => {\r\n            this.setState((state, props) => ({\r\n                currentMessage: \"Connected as \" + client.user.tag + \"!\",\r\n                clientConnected: true\r\n            }));\r\n\r\n            // Guilds is updated with each guild the bot is connected to\r\n            client.guilds.cache.forEach((guild) => {    \r\n                this.setState(prevState => {\r\n                    let guilds = Object.assign({}, prevState.guilds);\r\n                    guilds[guild.id] = guild;\r\n                    return { guilds };\r\n                });\r\n            })\r\n            console.log(this.state.guilds);\r\n            \r\n            // Channels is updated with each channel the bot is connected to\r\n            client.channels.cache.forEach((channel) => {    \r\n                this.setState(prevState => {\r\n                    let channels = Object.assign({}, prevState.channels);\r\n                    channels[channel.id] = channel;\r\n                    return { channels };\r\n                });    \r\n            })\r\n            console.log(this.state.channels);\r\n        });\r\n        client.login(this.state.botToken).catch(()=>{\r\n            console.log(\"Invalid token!\");\r\n            this.setState((state, props) => ({\r\n                currentMessage : this.state.botToken + \" is an invalid token!\"\r\n            }));\r\n        });\r\n        \r\n        event.preventDefault();\r\n    }\r\n\r\n    startListeningToMessages(){\r\n        if(this.state.clientListening === true){\r\n            return;\r\n        } else {\r\n            client.on('message', (receivedMessage) => {\r\n                this.setState((state, props)=>({\r\n                    clientListening : true\r\n                }), ()=>{\r\n                    console.log(receivedMessage)\r\n                    this.updateMessages();\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    // Let the state know that a guild has been selected\r\n    selectGuild(id){\r\n        this.setState((state, props) => ({\r\n            selectedGuild: this.state.guilds[id]\r\n        }), ()=>this.createChannelListForGuild(this.state.selectedGuild));\r\n    }\r\n\r\n    // Create a channel list for a selected guild\r\n    createChannelListForGuild(guild){\r\n        console.log(guild)\r\n        this.setState((state, props) => ({\r\n            guildChannels: guild.channels.cache\r\n        }), ()=>console.log(this.state.guildChannels))\r\n    }\r\n\r\n    // Let the state know that a channel has been selected\r\n    selectChannel(id){\r\n        console.log(id);\r\n        this.setState((state, props) => ({\r\n            selectedChannel: this.state.channels[id]\r\n        }), ()=>{\r\n            this.updateMessages();\r\n            this.startListeningToMessages();\r\n        })\r\n    }\r\n\r\n    // Place messages of channel in state\r\n    updateMessages(){\r\n        if(this.state.selectedChannel != null){\r\n            this.state.selectedChannel.messages.fetch({ limit: 30 })\r\n                .then(messages => {\r\n                    var messageArray = Array.from(messages.values());\r\n                    console.log(messageArray);\r\n                    this.setState((state, props)=>({\r\n                        messageArray: messageArray.reverse()\r\n                    }));\r\n                })\r\n                .catch(console.error);\r\n        }\r\n    }\r\n\r\n    // Update the text area for message input\r\n    updateMessageInput(event){\r\n        this.setState({\r\n            messageInput : event.target.value\r\n        });\r\n    }\r\n\r\n    // Send the message in the text area\r\n    sendMessage(event){\r\n        if(this.state.messageInput !== \"\"){\r\n            console.log(\"Trying to send \"+this.state.messageInput);\r\n            this.state.selectedChannel.send(this.state.messageInput);\r\n            this.setState((state, props)=>({messageInput: \"\"}));\r\n            this.updateMessages();\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        // Create list items for each guild\r\n        var guildList = null;\r\n        if(this.state.clientConnected === true){\r\n            guildList = Object.keys(this.state.guilds).map((guildId) =>\r\n                <li key={guildId} onClick={() => this.selectGuild(guildId)}>{this.state.guilds[guildId].name}</li>\r\n            );\r\n        }\r\n\r\n        // Create list items for each channel in the guild\r\n        var channelList = null;\r\n        if(this.state.selectedGuild != null){\r\n            channelList = Array.from(this.state.guildChannels).map(([channelId, channel]) =>{\r\n                if(channel.type === \"text\")return <li key={channelId} onClick={() => this.selectChannel(channelId)}>{channel.name}</li>\r\n            });\r\n        }\r\n\r\n        // Display all messages in the channel\r\n        var messageList = null;\r\n        if(this.state.messageArray != null){\r\n            messageList = this.state.messageArray.map((message) =>\r\n                <li key={message.id}>{message.author.username}: {message.content}</li>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className={styles.container}>\r\n                {this.state.clientConnected ? <div className={styles.discordAppAside}>\r\n                    <div>\r\n                        <h3>Guilds</h3>\r\n                        <ul>{guildList}</ul>\r\n                    </div>\r\n                    <div>\r\n                        <h3>Channels</h3>\r\n                        <ul>{channelList}</ul>\r\n                    </div>\r\n                </div>: null}\r\n                <main>\r\n                    <div className={styles.discordApp}>\r\n                        <div className={styles.discordAppHeader}>\r\n                            {this.state.selectedChannel == null ? null : \r\n                            <h3>Connected to channel {this.state.selectedChannel.name} in {this.state.selectedChannel.guild.name}</h3>\r\n                            }\r\n                            <p>Status: {this.state.currentMessage}</p>\r\n                        </div>\r\n                        \r\n                        {this.state.clientConnected ? null : \r\n                            <form onSubmit={this.startDiscordBot}>\r\n                                <label>\r\n                                    Enter bot token here: \r\n                                    <input type=\"text\" value={this.state.botToken} onChange={this.updateBotToken}></input>\r\n                                    <input type=\"submit\" value=\"Start bot\"></input>\r\n                                </label>\r\n                            </form>\r\n                        }\r\n                        <ul>{messageList}</ul>\r\n                        {this.state.selectedChannel == null ? null : \r\n                        <form onSubmit={this.sendMessage}>\r\n                            <input type=\"text\" value={this.state.messageInput} onChange={this.updateMessageInput}></input>\r\n                            <input type=\"submit\" value=\"Send\"></input>\r\n                        </form>\r\n                        }\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport styles from './app.module.css';\nimport { BrowserRouter as Router, Switch, Route, NavLink } from 'react-router-dom'\nimport Directory from './directory';\nimport BotView from './bot-view';\n\nfunction App() {\n  return (\n    <Router exact path ='/ReactInariBot'>\n      <div className={styles.container}>\n        <header>\n          <NavLink to=\"/ReactInariBot/home\" activeClassName={styles.homeLink}>Main Page</NavLink>\n          <nav>\n            <NavLink to=\"/ReactInariBot/home\" activeClassName={styles.activeLink}>About</NavLink>\n            <NavLink to=\"/ReactInariBot/main-app\" activeClassName={styles.activeLink}>Main App</NavLink>\n          </nav>\n        </header>\n\n        <main>\n          <Switch>\n            <Route path=\"/ReactInariBot/home\">\n              <Directory></Directory>\n            </Route>\n            <Route path=\"/ReactInariBot/main-app\">\n              <BotView></BotView>\n            </Route>\n          </Switch>\n        </main>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__2IjM0\",\"homeLink\":\"app_homeLink__eQpJN\",\"activeLink\":\"app_activeLink__176kb\"};"],"sourceRoot":""}